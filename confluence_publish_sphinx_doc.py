# -*- coding: utf-8 -*-
import os
import sys
import glob
import re
import shutil
import tempfile
from conf_publisher import publish

def createPageString(confluencePages, imagesPath, downloadsPath, jsonBuildPath):
    '''
    Creates the page part of the config.yml
    Tages the confluencePages parameter in the format as a comma separated list 
    of <file name>:<confluence page ID> pairs i.e. README:74638263,INDEX:472947363
    imagePath is the path to where image attachments reside.
    downloadsPath is the path to where downloads attachments reside.
    configFilePath is the path to the config.yml used by confluence publisher.
    
    The string generated will look like this:
    pages:
    - id: <confluence_page_id>
      source: <file_name>
    '''
    
    pagesStr=''
    pages=confluencePages.split(',')

    # loop through the list of file:confluence_page_id pairs and build up the id and source part of the config.yml
    for page in pages:
        pageParts = page.split(':');
        pageFile = pageParts[0]
        pageConfluenceId = pageParts[1]
        attachmentsStr = createAttachmentsString(imagesPath, downloadsPath)
        jsonFile = "%s/%s.fjson" % (jsonBuildPath, pageFile)

        if not os.path.isfile(jsonFile):
            raise ValueError("File specified (%s) does not exist" % jsonFile)
        
        pageStr = "- id: %s\n  source: %s" % (pageConfluenceId, pageFile)
        if pagesStr != '':
            pagesStr = "%s\n%s%s" % (pagesStr, pageStr, attachmentsStr)
        else:
            pagesStr = "%s%s" % (pageStr, attachmentsStr)

    if pageStr == '':
        raise ValueError('Unable to parse confluencePages - is empty or malformed')

    pagesStr = "pages:\n%s" % pagesStr
    return pagesStr

def createAttachmentsString(imagesPath, downloadsPath):
    '''
    Creates the attachments part of the config.yml
    The string generated by this function is:

    attachments:
      images:
      - <image1>
      - <image2>
      downloads:
      - <download1>
      - <download2>
    '''

    # get the generated images and downloads parts
    attachmentsStr = ''
    imagesStr = createImagesString(imagesPath)
    downloadStr = createDownloadsString(downloadsPath)
    
    if downloadStr != '' or imagesStr != '':
        attachmentsStr = "%s\n  attachments:" % attachmentsStr
        if imagesStr != '':
            attachmentsStr = "%s\n%s" % (attachmentsStr, imagesStr)
        if downloadStr != '':
            attachmentsStr = "%s\n%s" % (attachmentsStr, downloadStr)
    return attachmentsStr

def createImagesString(imageDir):
    # creates the image part of the config.yml
    imagesStr = ''
    imageFiles = glob.glob(imageDir+'/*')
        
    if (len(imageFiles) > 0):
        imagesStr = '    images:'
        for imageFile in imageFiles:
            imagesStr = "%s\n    - %s" % (imagesStr, imageFile)
    return imagesStr

def createDownloadsString(downloadDir):
    # creates the downloads part of the config.yml
    downloadStr = ''
    downloadFiles = glob.glob(downloadDir+'/*')

    if (len(downloadFiles) > 0):
        downloadStr = '    downloads:'
        for downloadFile in downloadFiles:
            downloadStr = "%s\n    - %s" % (downloadStr, downloadFile)
    return downloadStr
            

def createConfigYaml(confluencePages, confluenceUrl, jsonBuildPath, downloadDir, imgDir, srcExt, configFilePath):
    #Stitches the different parts of the config together to create a complete string
    
    imagesPath = "%s/%s" % (jsonBuildPath, imgDir)
    downloadsPath = "%s/%s" % (jsonBuildPath, downloadDir)
    pageStr = createPageString(confluencePages, imagesPath, downloadsPath, jsonBuildPath)
    
    yamlStr = (
        "version: 2\n"
        "url: %s\n"
        "base_dir: %s\n"
        "downloads_dir: %s\n"
        "images_dir: %s\n"
        "source_ext: %s\n"
        "%s"
        % (confluenceUrl, jsonBuildPath, downloadDir, imgDir, srcExt, pageStr)
    )

    return yamlStr

def writeConfigYaml(configFilePath, configStr):
    # writes the config string to file
    try:
        if os.path.isfile(configFilePath):
            os.remove(configFilePath)
    except OSError as e:
        print "Unable to remove file: %s" % e

    print "Writing new config file"
    fh = open(configFilePath, "w")
    fh.write(configStr)
    fh.close()

def replace_in_file(filename, pattern, replace):
    '''
    Perform a Python equivalent of in-place `sed` substitution: e.g.,
    `sed -i -e 's/'${pattern}'/'${repl}' "${filename}"`.
    '''
    # For efficiency, precompile the passed regular expression.
    pattern_compiled = re.compile(pattern)

    with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:
        with open(filename) as src_file:
            for line in src_file:
                tmp_file.write(pattern_compiled.sub(replace, line))

    #overwrite original file with temp file such that file attributes are preserved
    shutil.copystat(filename, tmp_file.name)
    shutil.move(tmp_file.name, filename)

def main():
    if 'confluenceAuth' not in os.environ:
        sys.exit('Environment variable confluenceAuth is missing')
  
    if 'confluencePages' not in os.environ:
        sys.exit('Environment variable confluencePages is missing')
  
    if 'confluenceUrl' not in os.environ:
        sys.exit('Environment variable confluenceUrl is missing')
    
    confluenceAuth = os.environ.get('confluenceAuth')
    confluencePages = os.environ.get('confluencePages')
    confluenceUrl = os.environ.get('confluenceUrl')
    jsonBuildPath = os.environ.get('jsonBuildPath', '/doc/sphinxdoc/build/json')
    configPath = os.environ.get('configPath', '/doc/sphinxdoc')
    configFilePath = configPath+'/config.yml'
    downloadDir = os.environ.get('downloadDir', '_downloads')
    imgDir = os.environ.get('imgDir', '_images')
    srcExt = os.environ.get('srcExt', '.fjson')

    print 'Creating the the config file using the following parameters:'
    print '- confluenceAuth: '+confluenceAuth
    print '- confluencePages: '+confluencePages
    print '- confluenceUrl: '+confluenceUrl
    print '- jsonBuildPath: '+jsonBuildPath
    print '- configPath: '+configPath
    print '- configFilePath: '+configFilePath
    print '- downloadDir: '+downloadDir
    print '- imgDir: '+imgDir
    print '- srcExt: '+srcExt
    
    configYamlStr = createConfigYaml(confluencePages, confluenceUrl, jsonBuildPath, downloadDir, imgDir, srcExt, configFilePath)
    writeConfigYaml(configFilePath, configYamlStr)

    '''
    filename=sys.argv[1]
    img=sys.argv[2]
    replace_in_file(filename, r'<p class=\\"plantuml\\">\\n<img src=\\"\.\./_images/%s.*?</p>' % img, '<p><ac:image><ri:attachment ri:filename=\\"%s\\" ri:version-at-save=\\"1\\" /></ac:image></p>' % img)
    '''
    
    sys.argv = [sys.argv[0], '-F', configFilePath, '--auth', confluenceAuth]
    print ''
    print 'Executing conf_publisher.publish with the following arguments:'
    print sys.argv
    
    publish.main()

if __name__ == '__main__':
    main()
